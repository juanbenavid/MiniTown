-- MiniTown NuXmv Model
-- Real Variables
-- Juan Benavides 1/2022

-- run with:
-- read_model -i RealDemPattern.smv ; go_msat ; msat_check_ltlspec_bmc -k n
-- where n is number of max bounds you wish to check for
-- can also just do plain simulation:
-- read_model -i RealDemPattern.smv ; go_msat ; msat_pick_state ; msat_simulate -v -k n

-- Syntax notes:
-- := is assignment
-- = is equality
-- case blocks are equivalent to if/else statements
-- : defines a relation ( belonging to a type/set)
-- -> is implication

MODULE main

-- Define block has static constants or relations that depend on model variables
-- pumpFlow defines the flow through pump as a function of the current demand and current tank level
-- tankFlow defines the flow in/out of the tank as a function of the pumpFlow
-- dT defines the change in tank level as a function of the tankFlow 
-- 0,1,2 correspond to the pump configuration, as in :
-- the result of pumpFlow0,tankFlow0,dT0 will be used if both pumps are off
-- the result of pumpFlow2,tankFlow2,dT2 will be used if both pumps are on
-- see paper for discussion on where these equations came from

DEFINE

pumpFlow0 := 0;
pumpFlow1 := 113.699 + 6.735*demand - 1.35* (tank/100);
pumpFlow2 := 181.44 + 18.356*demand - 2.1*(tank/100);

tankFlow0 := demand * 208 - pumpFlow0;
tankFlow1 := demand * 208 - pumpFlow1;
tankFlow2 := demand * 208 - pumpFlow2;

dT0 := tankFlow0 * 0.004678 *100;
dT1 := tankFlow1 * 0.004678 *100;
dT2 := tankFlow2 * 0.004678 *100;

-- VAR block defines the model variables
-- pumps can be either {on,off}
-- demand is any real number but we will define it between 0 and 1
-- tank (height) is any real number
-- time is an unbounded integer that in this case represants hours
-- dd is the delta demand between states, have to define it this way to constrain it

VAR
  pump1  : {on,off};
  pump2  : {on,off};
  demand : real;
  tank   : real;
  time   : integer;
  dd     : real;

-- ASSIGN block defines init and next states for each variable
-- if an init state is not chosen before simulation, it can be picked at run time with msat_pick_state
-- if an init state is not chosen before ltl checking, nuXmv will pick a random value
-- next() statements can be simple assignments like next(time) := time + 1
-- or next() statements can be case statements that depend on other variables
-- you can reference the next() of a var when evaluating next() (bascially looking ahead)
	
ASSIGN

init(tank) := 500; -- change this as needed
init(pump1) := on;
init(pump2) := off;
init(time) := 0;
init(demand) := 0.9;
init(dd) := 0;

next(dd) := next(demand) - demand;

next(pump1) := case

	next(tank) <= 400 : on;
	next(tank) >= 630: off;
	TRUE : pump1;
esac;

next(pump2) := case

	next(tank) <= 100 : on;
	next(tank) >= 450: off;
	TRUE : pump2;
esac;

next(time) := time + 1;


-- INVAR statements can be applied to any variable to constrain their behavior
-- Want to constrain our demand to only changing by 0.2 every hour

INVAR demand <= 1;
INVAR demand >= 0;
INVAR dd >= -0.2 & dd <= 0.2;

-- TRANS statements are used to describe the transition from state to state
-- They work in conjuction with the next() statements we assigned above
-- here we choose which dT to apply depending on pump configuration
-- read as : this pump configuration Implies this change in tank state


TRANS pump1 = off & pump2 = off -> next(tank) = tank - dT0;
TRANS pump1 = on & pump2 = off -> next(tank) = tank - dT1;
TRANS pump1 = on & pump2 = on -> next(tank) = tank - dT2;
TRANS pump1 = off & pump2 = on -> next(tank) = tank - dT1;

-- Can check assertions with LTLSPEC or INVARSPEC
-- G prefix signifies we want to verifiy the property globally for all states
-- NuXmv will check all of these when we run the msat_check_ltlspec_bmc command

INVARSPEC tank <= 550;

LTLSPEC G tank <= 550;
LTLSPEC G tank <= 600;
LTLSPEC G tank <= 650;

LTLSPEC G tank >= 300;
LTLSPEC G tank >= 200;
LTLSPEC G tank >= 100;
LTLSPEC G tank >= 0;









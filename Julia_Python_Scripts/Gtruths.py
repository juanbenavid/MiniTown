
import numpy as np
import pickle
import matplotlib.pyplot as plt
import os

epanetTank = np.array([
74.50,           
74.34,           
74.21,           
74.10,           
74.20,           
74.37,           
74.58,           
74.70,           
74.86,           
75.09,           
75.14,           
75.08,           
75.20,           
75.35,           
75.53,           
75.69,           
75.86,           
76.00,           
75.90,           
75.70,           
75.53,           
75.47,           
75.46,           
75.49,           
75.50,           
75.47,           
75.45,           
75.52,           
75.62,           
75.60,           
75.69,           
75.75,           
75.92,           
75.93,           
75.51,           
75.01,           
74.56,           
74.11,           
73.68,           
73.27,           
72.86,           
72.54,           
72.61,           
72.88,           
73.29,           
73.65,           
73.91,           
74.10,           
74.31,           
74.50,           
74.62,           
74.49,           
74.46,           
74.78,           
75.09,           
75.24,           
75.37,           
75.47,           
75.57,           
75.65,           
75.87,           
75.96,           
75.83,           
75.71,           
75.62,           
75.33,           
74.83,           
74.56,           
74.20,           
73.86,           
73.46,           
73.01,           
72.54,           
72.41,           
72.41,           
72.48,           
72.61,           
72.84,           
73.08,           
73.38,           
73.52,           
73.58,           
73.53,           
73.41,           
73.32,           
73.24,           
73.11,           
73.01,           
72.94,           
72.88,           
73.05,           
73.24,           
73.53,           
73.87,           
74.10,           
74.31,           
74.50,           
74.74,           
75.04,           
75.10,           
75.16,           
75.45,           
75.63,           
75.69,           
75.72,           
75.60,           
75.39,           
75.22,           
75.09,           
75.15,           
75.26,           
75.28,           
75.60,           
75.96,           
76.05,           
76.08,           
75.96,           
75.74,           
75.55,           
75.34,           
74.92,           
74.41,           
73.96,           
73.62,           
73.42,           
73.28,           
73.18,           
73.15,           
73.08,           
72.88,           
72.55,           
72.48,           
72.42,           
72.34,           
72.27,           
72.21,           
72.22,           
72.33,           
72.43,           
72.55,           
72.62,           
72.61,           
72.45,           
72.30,           
72.20,           
72.12,           
72.16,           
72.30,           
72.55,           
72.81,           
73.12,           
73.59,           
74.17,           
74.65,           
74.82,           
74.98,           
75.20,           
75.38,           
75.58,           
75.37,           
75.20,           
75.15,           
75.19,           
75.32,           
75.31,           
75.17,           
74.97,           
74.72,           
74.50,           
74.67,           
74.56           
]) 

baseDem = 21.7867 

demPattern = np.array([            
12.40  ,           
10.12  ,         
9.55   ,         
7.85   ,         
6.75   ,         
7.29   ,         
8.38   ,         
10.27  ,         
11.99  ,         
14.83  ,         
15.33  ,         
14.62  ,         
17.36  ,         
15.68  ,         
16.79  ,         
16.09  ,         
17.75  ,         
15.78  ,         
17.58  ,         
16.98  ,         
18.88  ,         
16.14  ,         
14.61  ,         
13.78  ,         
11.38  ,         
11.04  ,         
9.71   ,         
9.91   ,         
10.36  ,         
11.63  ,         
14.43  ,         
13.56  ,         
14.73  ,         
15.82  ,         
17.50  ,         
15.28  ,         
15.11  ,         
14.24  ,         
13.54  ,         
14.21  ,         
12.46  ,         
12.61  ,         
12.68  ,         
15.50  ,         
15.35  ,         
14.51  ,         
16.16  ,         
15.08  ,         
15.84  ,         
13.49  ,         
10.09  ,         
9.82   ,         
6.74   ,         
6.15   ,         
9.44   ,         
8.86   ,         
11.87  ,         
15.24  ,         
16.12  ,         
14.02  ,         
14.83  ,         
15.06  ,         
14.76  ,         
13.64  ,         
13.65  ,         
15.56  ,         
14.86  ,         
17.17  ,         
16.51  ,         
17.17  ,         
17.47  ,         
18.42  ,         
13.18  ,         
9.67   ,         
11.18  ,         
7.95   ,         
6.92   ,         
10.11  ,         
8.62   ,         
13.98  ,         
14.62  ,         
14.57  ,         
17.31  ,         
14.70  ,         
16.43  ,         
17.61  ,         
15.55  ,         
14.94  ,         
14.84  ,         
11.97  ,         
14.86  ,         
12.41  ,         
16.20  ,         
18.13  ,         
14.79  ,         
16.26  ,         
13.10  ,         
10.97  ,         
11.31  ,         
7.83   ,         
6.52   ,         
9.87   ,         
9.36   ,         
11.75  ,         
19.53  ,         
19.54  ,         
14.87  ,         
12.63  ,         
9.35   ,         
9.15   ,         
13.71  ,         
15.06  ,         
14.61  ,         
13.48  ,         
14.87  ,         
18.15  ,         
19.67  ,         
17.90  ,         
18.51  ,         
15.06  ,         
15.61  ,         
11.93  ,         
11.62  ,         
9.14   ,         
7.76   ,         
7.37   ,         
9.86   ,         
11.11  ,         
12.30  ,         
16.57  ,         
13.54  ,         
14.78  ,         
15.10  ,         
13.93  ,         
13.51  ,         
14.37  ,         
14.30  ,         
13.77  ,         
13.16  ,         
15.34  ,         
16.83  ,         
19.29  ,         
19.25  ,         
16.38  ,         
15.56  ,         
9.98   ,         
9.73   ,         
9.35   ,         
8.75   ,         
9.44   ,         
10.24  ,         
11.38  ,         
12.87  ,         
16.45  ,         
16.78  ,         
14.05  ,         
15.95  ,         
15.46  ,         
11.94  ,         
12.59  ,         
12.91  ,         
13.61  ,         
12.19  ,         
16.71  ,         
15.62  ,         
16.87  ,         
19.71  ,         
18.68  ,         
12.40  ,         
10.12  ,         
9.55])

demPattern2 = np.array([
0.916115149   ,
0.886028665,
0.8658086,
0.68403102,
0.609525356,
0.572861261,
0.661415405,
0.618498518,
0.557675911,
0.723496691,
0.825896301,
0.646920297,
0.625685168,
0.59121361,
0.612326932,
0.598319055,
0.633440253,
0.849689391,
0.940273661,
0.9169272,
0.828373056,
0.771204677,
0.738803849,
0.754963661,
0.78866377,
0.76868732,
0.701571318,
0.660237931,
0.774290471,
0.681797881,
0.710016647,
0.601770271,
0.662592878,
0.835762719,
0.906411141,
0.870153072,
0.867798124,
0.851394697,
0.838807909,
0.832311503,
0.763936822,
0.670550976,
0.543302611,
0.403629867,
0.443217345,
0.532705347,
0.599415323,
0.577692964,
0.592350481,
0.651264769,
0.889317471,
0.790815705,
0.478013724,
0.475293353,
0.631613139,
0.643266068,
0.664947826,
0.677981242,
0.689268748,
0.553899874,
0.568557392,
0.570100288,
0.563238459,
0.536765602,
0.714442324,
0.903406553,
0.706606034,
0.793820293,
0.769905396,
0.824150392,
0.883592513,
0.890210727,
0.877745747,
0.782167364,
0.725161395,
0.670713387,
0.565837021,
0.563522677,
0.512850704,
0.657314548,
0.725973446,
0.821064599,
0.89585448,
0.859921231,
0.862357384,
0.905152463,
0.86885379,
0.851394697,
0.837792846,
0.629339397,
0.619554184,
0.511835641,
0.462016322,
0.569247635,
0.570709326,
0.598684478,
0.533598603,
0.486540257,
0.701855536,
0.707905315,
0.500588737,
0.591863251,
0.70270819,
0.736530107,
0.871777173,
0.958382395,
0.921677697,
0.878842016,
0.713061838,
0.655528036,
0.745381461,
0.469202972,
0.424946202,
0.401153112,
0.429453084,
0.563522677,
0.660522149,
0.626172398,
0.641438954,
0.839010922,
0.925534938,
0.860002436,
0.776117585,
0.643103658,
0.595639287,
0.553615656,
0.50655731,
0.527183402,
0.657395753,
0.771610703,
0.811888424,
0.840432011,
0.863981485,
0.850907467,
0.845507329,
0.788135937,
0.689837184,
0.700434447,
0.686629583,
0.720248488,
0.808680823,
0.931381704,
0.93227496,
0.884972999,
0.866336433,
0.752446303,
0.656989728,
0.564172317,
0.546063584,
0.496934508,
0.333834098,
0.230947257,
0.328677575,
0.608347883,
0.614072841,
0.55670145,
0.592837712,
0.581022372,
0.94599862,
0.914206829,
0.816192294,
0.726257664,
0.648341386,
0.777944699,
0.895895083,
0.953388282,
1,
0.980307767,
0.606723781,
0.864184498,
0.87108693
])

epanetTank = epanetTank - 71.5
demPattern = demPattern / baseDem

with open('demPattern.pickle', 'wb') as handle:
    pickle.dump(demPattern, handle, protocol=pickle.HIGHEST_PROTOCOL)

with open('groundTruth.pickle', 'wb') as handle:
    pickle.dump(epanetTank, handle, protocol=pickle.HIGHEST_PROTOCOL)

with open('groundTruth.pickle', 'rb') as handle:
    tank = pickle.load(handle)

#plt.plot(np.arange(len(demPattern)),demPattern)
#plt.show()

#plt.plot(np.arange(len(epanetTank)),tank)
#plt.show()

# for nuxmv real:
print("next(demand) := case")
for i,j in enumerate(demPattern2):
    print("   next(time) = ",i," : ",round(j,2),";")

print("   TRUE:1;")
print("esac;")

# for nuxmv discretized:
states = np.array([0,0.25,0.5,0.75,1])

print("next(demand) := case")
for time,dem in enumerate(demPattern2):
    curr = states[np.argmin(np.abs(dem-states))]
    print("   next(time) = ",time," : ",int(curr*100),";")

print("   TRUE:1;")
print("esac;")

'''
pumpFlow0 := 0;
pumpFlow1 := 113.699 + 6.735*demand - 1.35* (tank/100);
pumpFlow2 := 181.44 + 18.356*demand - 2.1*(tank/100);

tankFlow0 := demand * 246 - pumpFlow0;
tankFlow1 := demand * 246 - pumpFlow1;
tankFlow2 := demand * 246 - pumpFlow2;

dT0 := tankFlow0 * 0.004678 *100;
dT1 := tankFlow1 * 0.004678 *100;
dT2 := tankFlow2 * 0.004678 *100;

'''


